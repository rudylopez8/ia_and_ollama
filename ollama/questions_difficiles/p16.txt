Traduit le texte suivant en français en français en français en français.
Open access
Published: 01 August 2024
Ant colony optimization for the identification of dysregulated gene subnetworks from expression data
Eileen Marie Hanna, Ghadi El Hasbani & Danielle Azar 
BMC Bioinformatics 
volume
 25, Article number: 254 (2024) Cite this article
High-throughput experimental technologies can provide deeper insights into pathway perturbations in biomedical studies. Accordingly, their usage is central to the identification of molecular targets and the subsequent development of suitable treatments for various diseases. Classical interpretations of generated data, such as differential gene expression and pathway analyses, disregard interconnections between studied genes when looking for gene-disease associations. Given that these interconnections are central to cellular processes, there has been a recent interest in incorporating them in such studies. The latter allows the detection of gene modules that underlie complex phenotypes in gene interaction networks. Existing methods either impose radius-based restrictions or freely grow modules at the expense of a statistical bias towards large modules. We propose a heuristic method, inspired by Ant Colony Optimization, to apply gene-level scoring and module identification with distance-based search constraints and penalties, rather than radius-based constraints.
Results
We test and compare our results to other approaches using three datasets of different neurodegenerative diseases, namely Alzheimer’s, Parkinson’s, and Huntington’s, over three independent experiments. We report the outcomes of enrichment analyses and concordance of gene-level scores for each disease. Results indicate that the proposed approach generally shows superior stability in comparison to existing methods. It produces stable and meaningful enrichment results in all three datasets which have different case to control proportions and sample sizes.
Conclusion
The presented network-based gene expression analysis approach successfully identifies dysregulated gene modules associated with a certain disease. Using a heuristic based on Ant Colony Optimization, we perform a distance-based search with no radius constraints. Experimental results support the effectiveness and stability of our method in prioritizing modules of high relevance. Our tool is publicly available at github.com/GhadiElHasbani/ACOxGS.git.
Peer Review reports
Background
Differential Gene Expression Analysis (DEA), typically performed using tools such as limma, is the most widely used method for detecting significant gene-disease associations based on mean expression variations between phenotypes [Reference 1]. However, while DEA can identify specific disease-associated genes, it does not take into consideration the network of interactions that govern the studied set of genes. The latter might lead to missing crucial mechanistic insights about multi-gene connections that underlie complex diseases. As a result, DEA can exhibit poor consistency between analyses of similar studies [Reference 2, Reference 3]. To address this drawback, several methods that take into consideration the structure of gene networks were introduced. They measure the effect of nodes over their direct and indirect neighbors. Their output typically consists of modules which are groups of dysregulated genes that contribute to a disease or phenotype of study.
One group of methods makes use of interaction information to perform pathway analyses, yielding a group of genes underlying a phenotype of interest. These pathway analyses can be functional such as GSEA [Reference 4] which aims to identify functionally enriched groups of genes in relation to a phenotype; topological such as SPIA [Reference 5] and CePa [Reference 6, Reference 7] which enhance functional scoring analyses with network information; or active module tools such as jActiveModules [Reference 8], HotNet [Reference 9], and COSINE [Reference 10], which combine expression and network information to identify disease-relevant subnetworks within pathways. Although pathway-level analyses can identify mechanistically interpretable multi-gene interactions [Reference 2, Reference 11, Reference 12], insights can be difficult to explore experimentally due to the lack of a precise gene target. Moreover, artificial pathway boundaries might limit the set of considered interactions. Therefore, there has been an increasing interest in developing gene-level analyses that incorporate network information.
Examples of such network-based methods include ENDEAVOUR [Reference 13] which relies on gene similarity with known disease genes, and GeneWanderer [Reference 14] which relies on gene distance from disease-relevant genes. Since information on such genes is sometimes not available, other methods were developed to overcome the need for gene-disease relevance information. For instance, the method in [Reference 15] performs a Laplacian kernel to transform the original network distances. It then uses this indirect distance measure along with differential expression of Laplace neighbors to identify disease genes. Similarly, DiSNEP [Reference 16] enhances the network with a diffusion process using similarity information. Since both methods effectively alter the distance between nodes in a network, interpreting the resulting modules and gene-level scores becomes complicated. Another method extends SPIA to produce a gene-level score that reflects changes in the expression of a given gene and its upstream neighbors [Reference 17]. Nevertheless, the suggested analysis is performed on each pathway separately rather than on the global network. Hence, later methods were designed to avoid these disadvantages by using direct interactions in a global network to produce gene-level scores.
One method, Local Enrichment Analysis (LEAN) [Reference 3], identifies dysregulated subnetworks from genome-wide omics datasets by focusing on local subnetworks of radius one which consist of only the direct neighbors of genes. The method is parameter free and exhaustive over all genes in the network. Another method, pathfindR [Reference 18], extends LEAN by letting the user specify the radius of local subnetworks to be enriched using three possible algorithms: Greedy Algorithm (GD), Simulated Annealing (SA), and Genetic Algorithm (GA). The authors show that GD performs better than SA and GA. SA and GA are heuristic methods that do not make biologically-relevant assumptions on the active subnetwork model. Insignificant genes from two modules of significant genes may thus be combined to form a larger connected active subnetwork. This results in few large and high-scoring active subnetworks with the remaining subnetworks being small and less informative. In short, these heuristic methods exhibit a tendency towards large subnetworks which is attributed to a statistical bias that is prevalent in many tools [Reference 19]. A method attempting to solve this issue, jActiveModules, uses user-defined parameters to control the number of subnetworks that are maintained throughout simulated annealing as well as the behavior of the method when adding nodes with a degree above threshold to a subnetwork [Reference 8]. Nevertheless, this method does not produce gene-level scores. It uses static heuristics as user-specified thresholds, and optimizes subnetworks based on a calibrated average measure of differential expression which might not necessarily reflect nonlinear patterns of differential expression. In addition, MultiNEP is a recent network-based approach that analyzes muti-omics datasets in order to identify disease-related subnetworks [Reference 20]. It considers gene-metabolite interactions in order to identify disease-related genes. Similarly, GMIGAGO is a gene module identification method that is based on gene ontology and Genetic Algorithm [Reference 21]. It starts by clustering gene expression data and then detects gene modules by optimizing functional similarity based on gene ontology.
Another recent approach is GeneSurrounder (GS) [Reference 22]. It is an exhaustive method in the sense that it considers the decay of differential expression (DE) and the sphere of influence of a gene. The sphere of influence measures the correlation between the behavior of a gene of interest and that of its direct surrounding neighbor genes, regardless of the phenotype. On the other hand, the decay of DE measures a pattern of decrease in magnitude of disease-specific disruption up to a certain distance from the gene. The optimal radius R that identifies the effect of the gene on its neighbors is given by the combination of the two p values which are based on the Fisher method (  from   and  ).   represents the p value for the sphere of influence which reflects the correlation between a center gene’s expression intensity and its neighbors. On the other hand,   represents the p value for the decay of DE which reflects the discordance between DE scores of the genes included in the module and their distances from the center gene. GS achieves meaningful DEA and pathway enrichment results, and exhibits scores that are more concordant than both limma and LEAN across three studies of the same disease, namely ovarian cancer. However, the search complexity and implementation of GS requires further development and optimization to be favorable for common use as well as to yield refined results. In the original implementation, GS checks for the optimal radius R of each gene’s module by choosing the radius with the lowest adjusted  . Nevertheless, genes could significantly influence just some of the neighboring genes on a particular radius, and this information is not always available in the form of weighted networks. Therefore, finding the optimal module could be seen as a combinatorial problem, as done in the heuristic methods of pathfindR. In this direction, we design and implement a biologically-informed heuristic method based on the Ant Colony Optimization (ACO) algorithm. The method takes as input the network and gene-expression data. Genes are sequentially considered and parallelized heuristic searches are then performed, on the basis of decay of differential expression, to identify candidate modules centered around each seed gene. The sphere of influence of each resulting module is then assessed to produce a combined p value. The best-scoring module is selected for further downstream analyses. Unlike GS, our implementation does not impose radius-based restrictions on the search space but rather distance penalties to avoid large modules. Moreover, this method, which, unlike pathfindR’s SA and GA, functions at the gene-level, is performed on each gene individually, similarly to GS, where each gene is assessed as the center of an optimized module solution. Accordingly, if a gene is part of a small insignificant module centered around a different gene, its own module will be independently assessed for significance, i.e., it will still be considered as a seed gene. That is since a module’s score is directly related to its designated center, i.e., seed, gene, similarly to GS.
We test the method on three publicly available benchmark microarray datasets of different diseases, and show that it generally results in more meaningful and stable disease-relevant enrichment outcomes. Since the optimization described here is performed on the basis of pre-calculated differential expression scores, the method can be easily adapted to other gene expression data sources, such as RNAseq, by simply replacing the DEA tool in the built-in preprocessing with another appropriate choice. A comparison of the characteristics of the proposed approach with GS, LEAN, and limma is presented in Table 1. The compared aspects cover whether the method is network-based, uses radius while searching for modules, includes a gene-level score, and contains randomness in its implementation. Similarly to GS, we also check the concordance of gene-level p values, given by the output of each method, between pairs of three different subsets of an Alzheimer’s disease dataset,  , whereby each subset is collected from a different brain region. Nevertheless, we focus our analysis on datasets with a case–control design instead of differing types of the same disease.
Table 1 Tested methods and some basic characteristics
Full size table 1
Methods
In this section, we present the methods used in the proposed approach. First, we start with a description of the general framework of Ant Colony Optimization. Next, we define the measures of module significance, and we define the quantification of biological influence of dysregulated genes. Then, we explain the workflow steps, starting with the gene expression and interconnection datasets as input, up till the generation of candidate dysregulated modules. A diagram depicting these steps is shown in Fig. 1. The structures of the corresponding input and output matrices are visualized in Fig. 2.
Fig. 1
figure 1
An overview of the proposed workflow which takes as input a gene expression dataset and an adjacency matrix representing gene interconnections. A built-in preprocessing step generates distance and rank correlation matrices, in addition to t-statistic scores reflecting the magnitude of differential expressions of gene in each module. Then, for each gene, the proposed Ant Colony Optimization approach identifies the most significantly dysregulated module, based on   which is derived from  , the p value for the sphere of influence of a center gene on its neighbors in a module, and  , the p value for the decay of differential expression within that module
Full size image figure 1
Fig. 2
figure 2
The structures of input and output matrices in the proposed approach
Full size image figure 2
Ant colony optimization
Ant Colony Optimization (ACO) is one of numerous meta-heuristic algorithms inspired by swarm intelligence, in this case the foraging behavior of ants. It is widely used to tackle combinatorial problems [Reference 23]. The inspiration stems from the observed efficiency in which ants conduct their search for food starting from the nest. Biological ants display a type of communication known as stigmergy. The main characteristics of stigmergy arise from the medium employed in this type of communication: pheromones. Pheromone deposits reflect the quality of the achievement and are then a means of indirect communication between ants. Moreover, pheromone deposits are local and transmit information between ants within a locus. Pheromones not only indirectly reflect the end result of an explored path but also its length. Although random fluctuations exist early on during the search, ants usually deposit pheromones faster after returning to the nest from the shorter path. In this way, ants converge to the shortest path. In ACO algorithms (Algorithm 1) [Reference 23], a model   consists of the search space S whereby a feasible solution   satisfies all constraints in a set   of constraints over the finite set of discrete variables defining S. A globally optimal solution   additionally minimizes a given objective function   (i.e.   ). The set of all possible solution components (i.e. all possible variable assignments in S) is denoted by C. Each component of a solution   is associated with a pheromone value that varies with quality and evaporates at every iteration. A component is represented by either vertices from a set of vertices V or edges from a set of edges E of a construction graph  .
Algorithm 1
figure a
The Ant Colony Optimization Metaheuristic
Full size image figure a
At the start of an iteration, a set of A ants construct solutions by traversing the graph in a manner that satisfies constrains in   followed by an optional local search. In Ant Systems, the decisions made by a given ant during its construction walk are governed by a stochastic process influenced by the pheromones allocated to possible components. ACO systems, however, use a pseudorandom mechanism that encourages elitism by deterministically picking the most probable component if a random number ranging from 0 to 1 falls under a user-specified threshold. Otherwise, decisions are made similarly to Ant Systems. Pheromones could be deposited in different ways. In Ant Systems, an offline pheromone update occurs at the end of each iteration after solutions have been constructed. ACO systems additionally employ a local pheromone update that decreases pheromone concentration on the last visited edge after each construction step performed by the ant with the current best solution. This serves to offset the offline pheromone update and encourage diversity. Evaporation is also performed using a user-specified or dynamic parameter to guide ants towards shorter and more frequently explored paths. In our formulation, each ant produces a candidate solution in each iteration, but these are independent from solutions generated at other iterations. In other words, information is not carried over between iterations, and only local pheromone updates are performed. Given the nature of the problem whereby the objective function is module-centric, an offline pheromone update would encourage convergence towards high-quality paths, which could bias the topology of generated modules. For the same reason, the final solution, or module, generated at each iteration is the union of the individual ant solutions (i.e. sets of vertices) explored in this iteration. Finally, we introduce an alloted capacity to each ant at every iteration. This capacity diminishes as the ant makes increasingly unfavorable moves, causing the ant to stop moving when its capacity is too low. Therefore, an iteration automatically terminates when all ants have no more capacity for movement.
Module significance quantification
The Order Statistic Correlation Coefficient (OSCC) [Reference 24] is a measure that can be used to detect linear and monotone nonlinear associations. It possesses the same basic characteristics as Pearson’s linear, Spearman’s  , and Kendall’s   coefficients. OSCC also exhibits robustness to noise and efficient time complexity ( ), when compared to Kendall’s   ( ). The calculation of OSCC is given in equation 1 using two paired input arrays x and y.
 
(1) 
The paired input arrays x and y are first ordered such that the order statistics   have respective concomitants being  . The order statistics and concomitants of the input y array are similarly defined. As  ,   under the assumption that x and y are mutually independent and both are independently identically distributed.
In this application, similarly to how GS uses Kendall’s   to score the decay of DE of modules [Reference 22], OSCC is used to score a module centered at a given gene   and denoted by the set module as shown in equation 2. The geodesic distance is the number of edges in the shortest path to the center gene. OSCC outputs a score ranging from -1 to 1. A module having a score of -1 is optimal, since the discordance between absolute moderated t-statistics, representing the magnitude of DE of genes belonging to a given set module, and the geodesic distances of those genes from the center gene   is maximal according to the OSCC.
 
(2) 
We denote the change in OSCC with and without the inclusion of a given node   to a set module by   which is calculated in equation 3.   outputs a value ranging from -2 to 2, with -2 being the greatest possible change in OSCC in the favorable direction, that is from 1 to -1.
 
(3) 
Biological influence quantification
In this part, we explain how GS [Reference 22] quantifies biological influence at the gene-level through the incorporation of system-level network information. Then, we present our approach to derive such measures in the next section. A gene score is defined as a combination of two scores representing the decay of DE and the sphere of influence detected in neighboring genes that are selected on the basis of a variable radius R. The sphere of influence score indicates that a gene influences its neighbors such that their expression intensities are correlated. The decay of the DE score indicates how the dysregulation of a disease-relevant gene is propagated to its neighbors in a decreasing pattern whereby the level of dysregulation is inversely proportional to the distance from the given gene. Since the extent to which a gene influences its surrounding neighbors with respect to both scores is unknown, all possible values for R are considered. The pseudocode for GS is given in Algorithm 2.
